#include <iostream>
#include <list>

using namespace std;

// создаем класс Node для узла связного списка
class Node{
public:
    int data; // значение узла
    Node* next; // указатель на следующий узел
    Node* prev; // указатель на предыдущий узел

    // конструктор класса Node
    Node(int data) {
        this->data = data;
        this->next = NULL;
        this->prev = NULL;
    }
};

// создаем класс LinkedList для связного списка
class LinkedList{
public:
    Node* head; // указатель на начало списка
    Node* tail; // указатель на конец списка

    // конструктор класса LinkedList
    LinkedList(){
        this->head = NULL;
        this->tail = NULL;
    }

    // метод для добавления нового элемента в список
    void push(int data) { 
        Node* newNode = new Node(data); // создаем новый узел
        if (this->head == NULL) { // если список пуст
            this->head = newNode; // новый узел становится началом списка
            this->tail = newNode; // новый узел становится концом списка
        }
        else { // если список не пуст
            newNode->prev = this->tail; // предыдущий узел нового узла - это текущий конец списка
            this->tail->next = newNode; // следующий узел текущего конца списка - это новый узел
            this->tail = newNode; // новый узел становится концом списка
        }
    }

    // метод для удаления узлов с максимальным значением
    void removeMax(){
        if(head == NULL){ // если список пуст
            return; // выходим из метода
        }

        int max_val = head->data; // начальное значение максимального элемента - значение первого узла списка
        Node* curr = head; // текущий узел - первый узел списка

        // находим максимальный элемент в списке
        while(curr != NULL){
            if(curr->data > max_val){
                max_val = curr->data;
            }
            curr = curr->next;
        }

        // удаляем узлы с максимальным значением
        while(head != NULL && head->data == max_val){
            Node* temp = head;
            head = head->next;
            head->prev = NULL;
            delete temp;
        }

        if(head == NULL){ // если список пуст
            return; // выходим из метода
        }

        Node* prev = head; // предыдущий узел - первый узел списка
        curr = head->next; // текущий узел - второй узел списка

        // проходим по списку и удаляем узлы с максимальным значением
        while(curr != NULL){
            if(curr->data == max_val){
                prev->next = curr->next;
                if(curr->next != NULL){
                    curr->next->prev = prev;
                }
                delete curr;
                curr = prev->next;
            }
            else{
                prev = curr;
                curr = curr->next;
            }
        }
    }

    // метод для вывода списка на экран
    void printList(){
        Node* curr = head;

        while(curr != NULL){
            cout << curr->data << " ";
            curr = curr->next;
        }
        cout << endl;
    }
};

// главная функция программы
int main(){
    LinkedList list;

    int n;
    cin >> n; // вводим количество элементов в стеке
    int max = -1000000; // переменная для хранения максимального значения
    for (int i = 0; i < n; i++) {
        int num;
        cin >> num; // вводим элементы стека
        if (num > max) { // если новый элемент больше максимального
            max = num; // обновляем значение максимального элемента
        }
        list.push(num); // добавляем элемент в стек
    }

    cout << "Original List: ";
    list.printList(); // выводим исходный список на экран

    list.removeMax(); // удаляем узлы с максимальным значением

    cout << "List after removing max value: ";
    list.printList(); // выводим измененный список на экран

    return 0;
}

