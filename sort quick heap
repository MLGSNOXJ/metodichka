#include <iostream>    
using namespace std;    
    
// Функция быстрой сортировки    
void quicksort(int* arr, int left, int right) {      
    if (left >= right) {    
        return;    
    }    
    // Выбор опорного элемента    
    int pivot = arr[(left + right) / 2];    
    // Инициализация указателей    
    int i = left;    
    int j = right;    
    // Пока указатели не пересекутся    
    while (i <= j) {    
        // Поиск элемента слева, который должен быть правее опорного    
        while (arr[i] < pivot) {    
            i++;    
        }    
        // Поиск элемента справа, который должен быть левее опорного    
        while (arr[j] > pivot) {    
            j--;    
        }    
        // Если указатели не пересеклись, то меняем элементы местами    
        if (i <= j) {    
            swap(arr[i], arr[j]);    
            i++;    
            j--;    
        }    
    }    
    // Рекурсивный вызов для левой половины массива    
    quicksort(arr, left, j);    
    // Рекурсивный вызов для правой половины массива    
    quicksort(arr, i, right);    
}    
    
// Функция сортировки столбцов матрицы    
void sortColumns(int** matrix, int n) {    
    for (int i = 0; i < n; i++) {    
        if (i % 2 == 0) {    
            int* column = new int[n];    
            for (int k = 0; k < n; k++) {    
                column[k] = matrix[k][i];    
            }    
            quicksort(column, 0, n - 1);    
            // Изменяем порядок элементов в массиве на обратный,  
            // чтобы получить сортировку по убыванию  
            for (int j = 0; j < n / 2; j++) {  
                std::swap(column[j], column[n - j - 1]);  
            }  
            for (int k = 0; k < n; k++) {    
                matrix[k][i] = column[k];    
            }    
            delete[] column;    
        } else {    
            int* column = new int[n];    
            for (int k = 0; k < n; k++) {    
                column[k] = matrix[k][i];    
            }    
            quicksort(column, 0, n - 1);    
            for (int k = 0; k < n; k++) {    
                matrix[k][i] = column[k];    
            }    
            delete[] column;    
        }    
    }    
}    

// Главная функция программы    
int main() {    
    // Объявление переменной для размерности матрицы    
    int n;    
    // Вывод сообщения на экран и ввод значения с клавиатуры    
    cout << "Введите размерность матрицы: ";    
    cin >> n;    
    
    // Создание двумерного динамического массива    
    int** matrix = new int*[n];    
    for (int i = 0; i < n; i++) {    
        matrix[i] = new int[n];    
        for (int j = 0; j < n; j++) {    
            // Вывод сообщения на экран и ввод значения с клавиатуры    
            cin >> matrix[i][j];    
        }    
    }    
       
    // Сортировка столбцов матрицы    
    sortColumns(matrix, n);    
    
    // Вывод отсортированной матрицы на экран    
    cout << "Отсортированная матрица:" << std::endl;    
    for (int i = 0; i < n; i++) {    
        for (int j = 0; j < n; j++) {    
            cout << matrix[i][j] << " ";    
        }    
        cout << endl;    
    }    
    
    // Освобождение памяти, выделенной под матрицу    
    for (int i = 0; i < n; i++) {    
        delete[] matrix[i];    
    }    
    delete[] matrix;    
    return 0;    
}    




















#include <iostream>
using namespace std;

// Функция сортировки кучей
void heapify(int* arr, int n, int i) {
    int largest = i; // Инициализация наибольшего элемента как корня
    int l = 2 * i + 1; // Левый потомок
    int r = 2 * i + 2; // Правый потомок

    // Если левый потомок больше корня
    if (l < n && arr[l] > arr[largest]) {
        largest = l;
    }

    // Если правый потомок больше корня
    if (r < n && arr[r] > arr[largest]) {
        largest = r;
    }

    // Если наибольший элемент не корень
    if (largest != i) {
        swap(arr[i], arr[largest]);

        // Рекурсивно преобразуем поддерево
        heapify(arr, n, largest);
    }
}

// Функция сортировки кучей
void heapsort(int* arr, int n) {
    // Построение кучи (перегруппировка массива)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Извлечение элементов из кучи по одному
    for (int i = n - 1; i >= 0; i--) {
        // Перемещаем текущий корень в конец
        swap(arr[0], arr[i]);

        // Вызываем процедуру heapify на уменьшенной куче
        heapify(arr, i, 0);
    }
}
// Функция сортировки столбцов матрицы
void sortColumns(int** matrix, int n) {
    // Перебираем столбцы матрицы
    for (int i = 0; i < n; i++) {
        // Если номер столбца четный, то сортируем по убыванию
        if (i % 2 == 0) {
            // Сортировка пузырьком
            for (int j = 0; j < (n - 1); j++) {
                for (int k = j + 1; k < n; k++) {
                    if (matrix[j][i] < matrix[k][i]) {
                        swap(matrix[j][i], matrix[k][i]);
                    }
                }
            }
        } else {
            // Если номер столбца нечетный, то сортируем по возрастанию
            // Создаем временный массив для сортировки
            int* column = new int[n];
            // Копируем столбец матрицы во временный массив
            for (int k = 0; k < n; k++) {
                column[k] = matrix[k][i];
            }
            // Сортируем временный массив
            heapsort(column, n);
            // Копируем отсортированный массив обратно в столбец матрицы
            for (int k = 0; k < n; k++) {
                matrix[k][i] = column[k];
            }
            // Удаляеменный массив
            delete[] column;
        }
    }
}
// Главная функция программы
int main() {
    // Объявление переменной для размерности матрицы
    int n;
    // Вывод сообщения на экран и ввод значения с клавиатуры
    cout << "Введите размерность матрицы: ";
    cin >> n;

    // Создание двумерного динамического массива
    int** matrix = new int*[n];
    for (int i = 0; i < n; i++) {
        matrix[i] = new int[n];
        for (int j = 0; j < n; j++) {
            // Вывод сообщения на экран и ввод значения с клавиатуры
            cin >> matrix[i][j];
        }
    }
   
    // Сортировка столбцов матрицы
    sortColumns(matrix, n);

    // Вывод отсортированной матрицы на экран
    cout << "Отсортированная матрица:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Освобождение памяти, выделенной под матрицу
    for (int i = 0; i < n; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    // Возвращаемое значение
    return 0;
}
