#include <iostream>  
#include <vector>  
#include <algorithm>  
#include <cmath>  
using namespace std; 
// определяем структуру Point, которая содержит координаты точки на плоскости 
struct Point { 
    int x, y; 
}; 
 
// главная функция программы 
int main() { 
    const double R = 5.0; // задаем радиус окружности 
    // создаем массив точек, используя инициализацию списка 
    vector<pair<int, int>> points = { {2, 3}, {4, 5}, {-1, 2}, {3, -4}, {-2, -2}, {6, 7} }; 
 
    // удаляем точки, находящиеся внутри окружности с радиусом R и центром в начале координат 
    points.erase(remove_if(points.begin(), points.end(), [R](pair<int, int> p) { // используем алгоритм remove_if и лямбда-выражение 
        return sqrt(p.first * p.first + p.second * p.second) < R; // условие для удаления точки 
    }), points.end()); // удаляем точки из массива 
 
    // выводим оставшиеся точки 
    for (const auto& p : points) { // используем цикл for-each и ссылку на константу 
        cout << "(" << p.first << ", " << p.second << ")" << endl; // выводим координаты точки 
    } 
 
    return 0; // возвращаем ноль, чтобы показать, что программа завершилась успешно 
}


#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;


int main() {
    // Создаём вектор пар целых чисел
    vector<pair<int, int>> points = {{-2, 3}, {4, -5}, {1, 2}, {-3, -1}, {0, 0}};
    
    // Вычисляем сумму отрицательных значений координат X точек
    int sum_x = accumulate(points.begin(), points.end(), 0, 
        [](int acc, const pair<int, int>& p) {
            return (p.first < 0) ? acc + p.first : acc;
        });
    
    // Выводим результат на экран
    cout << sum_x << endl;
    
    // Завершаем программу
    return 0;
}


#include <iostream> 
#include <vector> 
#include <algorithm> 
#include <cmath> 
using namespace std; 
struct Point { 
    int x; 
    int y; 
 
    Point(int x, int y) : x(x), y(y) {} 
}; 
 
int main() { 
    vector<pair<int, int>> points = {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}}; 
 
    auto max_point = max_element(points.begin(), points.end(), 
        [](const pair<int, int>& p1, const pair<int, int>& p2) { 
            return sqrt(p1.first * p1.first + p1.second * p1.second) < sqrt(p2.first * p2.first + p2.second * p2.second); 
        }); 
 
    cout << max_point->first << ", " << max_point->second << endl; 
 
    return 0; 
}

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int cmp(const pair<int,int>& a, const pair<int,int>& b) {
    if (a.first == b.first) {
        return a.second < b.second;
    } else {
        return a.first > b.first;
    }
}

int main() {
    vector<pair<int,int>> points = {{1, 2}, {3, 4}, {5, 6}, {1, 7}, {3, 8}, {5, 9}};

    sort(points.begin(), points.end(), cmp);

    for (const auto& p : points) {
        cout << "(" << p.first << ", " << p.second << ")" << endl;
    }

    return 0;
}
