0)
#include <iostream>
#include <list>
using namespase std;
int main() {
    list<int>* numbers = new list<int>();
    numbers->push_back(1);
    numbers->push_back(2);
    numbers->push_back(3);

    cout << numbers->size() << endl;

    numbers->clear();

    cout <<  numbers->size() << endl;

    delete numbers;

    return 0;
}
1)
2)
// Определяем шаблон класса SimpleVector
template <typename T>
class SimpleVector {
public:
    // Конструктор по умолчанию, создающий пустой вектор (size_ = 0, capacity_ = 0, data_ = nullptr)
    SimpleVector() : size_(0), capacity_(0), data_(nullptr) {}

    // Конструктор, создающий вектор заданного размера
    explicit SimpleVector(size_t size) : size_(size), capacity_(size), data_(new T[size]) {}

    // Конструктор копирования
    SimpleVector(const SimpleVector& other) : size_(other.size_), capacity_(other.capacity_), data_(new T[other.capacity_]) {
        std::copy(other.begin(), other.end(), begin());
    }

    // Конструктор перемещения
    SimpleVector(SimpleVector&& other) noexcept : size_(other.size_), capacity_(other.capacity_), data_(other.data_) {
        other.size_ = 0;
        other.capacity_ = 0;
        other.data_ = nullptr;
    }

    // Деструктор
    ~SimpleVector() {
        delete[] data_;
    }

    // Оператор присваивания копированием
    SimpleVector& operator=(const SimpleVector& other) {
        if (this != &other) {
            delete[] data_;
            size_ = other.size_;
            capacity_ = other.capacity_;
            data_ = new T[capacity_];
            std::copy(other.begin(), other.end(), begin());
        }
        return *this;
    }

    // Оператор присваивания перемещением
    SimpleVector& operator=(SimpleVector&& other) noexcept {
        if (this != &other) {
            delete[] data_;
            size_ = other.size_;
            capacity_ = other.capacity_;
            data_ = other.data_;
            other.size_ = 0;
            other.capacity_ = 0;
            other.data_ = nullptr;
        }
        return *this;
    }

    // Оператор доступа к элементу по индексу (для изменяемого вектора)
    T& operator[](size_t index) {
        return data_[index];
    }

    // Оператор доступа к элементу по индексу (для неизменяемого вектора)
    const T& operator[](size_t index) const {
        return data_[index];
    }

    // Методы для получения указателей на начало и конец вектора (для изменяемого и неизменяемого вектора)
    T* begin() {
        return data_;
    }
    T* end() {
        return data_ + size_;
    }
    const T* begin() const {
        return data_;
    }
    const T* end() const {
        return data_ + size_;
    }

    // Методы для получения текущего размера и ёмкости вектора
    size_t Size() const {
        return size_;
    }
    size_t Capacity() const {
        return capacity_;
    }

    // Метод для добавления элемента в конец вектора
    void PushBack(const T& value) {
        if (size_ == capacity_) {
            capacity_ = capacity_ == 0 ? 1 : 2 * capacity_; // Увеличиваем ёмкость вектора в два раза, если она равна текущему размеру вектора
            T* new_data = new T[capacity_]; // Выделяем память для нового увеличенного вектора
            for (size_t i = 0; i < size_; ++i) {
                new_data[i] = std::move(data_[i]); // Перемещаем элементы из старого вектора в новый
            }
            delete[] data_; // Освобождаем память, занятую старым вектором
            data_ = new_data; // Присваиваем указатель на новый вектор
        }
        data_[size_++] = value; // Добавляем новый элемент в конец вектора
    }

private:
    size_t size_; // Текущий размер вектора
    size_t capacity_; // Ёмкость вектора
    T* data_; // Указатель на массив элементов вектора
};

// Пример использования класса SimpleVector
int main() {
    SimpleVector<int> v; // Создаём пустой вектор
    v.PushBack(1); // Добавляем элементы в конец вектора
    v.PushBack(2);
    v.PushBack(3);
    for (size_t i = 0; i < v.Size(); ++i) { // Выводим элементы вектора на экран
        std::cout << v[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}
