#include <iostream> // стандартная библиотека ввода-вывода
#include <math.h> // математическая библиотека
#include <string> // библиотека для работы со строками
#include <vector> // библиотека для работы с векторами

using namespace std;

// Объявление класса Stack
class Stack
{
    struct Element // объявление структуры элемента стека
    {
        int inf; // значение элемента
        Element *next; // указатель на следующий элемент
        Element(int x, Element *p) : inf(x), next(p){} // конструктор элемента
    };
    Element *head; // указатель на вершину стека
public:
    Stack() : head(0) // конструктор стека
    {}
    bool Empty() // проверка на пустоту стека
    {
        return head == 0;
    }
    void push(int num) { // добавление элемента в стек
        head = new Element(num, head);
    }
    int Pop() // извлечение элемента из стека
    {
        if(Empty()) // если стек пустой
        {
            return 0; // возвращаем 0
        }
        
        Element *r = head; // создаем указатель на вершину стека
        
        int i = r->inf; // сохраняем значение вершины стека
        
        head = r->next; // перемещаем указатель на следующий элемент
        delete r; // удаляем вершину стека
        return i; // возвращаем сохраненное значение вершины стека
    }

    int top() { // возвращение значения вершины стека
        if (Empty()) { // если стек пустой
            return 0; // возвращаем 0
        } else
        {
            return head -> inf; // возвращаем значение вершины стека
        }
       
    }
};

// Главная функция

     int main()
{
    Stack s;
    int n;
    cin >> n; // количество элементов в стеке
    int max = -1000000000000000000000000000000; // переменная для хранения максимального значения
    for (int i = 0; i < n; i++) {
        int num;
        cin >> num; // вводим элементы стека
        if (num > max) { // если новый элемент больше максимального
            max = num; // обновляем значение максимального элемента
        }
        s.push(num); // добавляем элемент в стек
    }
    Stack temp; // создаем временный стек
    while (!s.Empty()) { // пока стек не пустой
        int num = s.top(); // сохраняем значение верхнего элемента
        s.Pop(); // удаляем верхний элемент
        if (num != max) { // если значение элемента не равно максимальному
            temp.push(num); // добавляем элемент во временный стек
        }
    }
    while (!temp.Empty()) { // пока временный стек не пустой
        cout << temp.top() << " "; // выводим элементы стека на экран
        temp.Pop(); // удаляем элемент из временного стека
    }
    return 0;
}

